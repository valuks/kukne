// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Backbone.View = (function(_super) {

    __extends(View, _super);

    function View() {
      return View.__super__.constructor.apply(this, arguments);
    }

    View.prototype.render = function() {
      return this.$el.append(this.template({
        "this": this
      }));
    };

    View.prototype.appendEvent = function(obj, event, callback) {
      if (!this.__events) {
        this.__events = [];
      }
      obj.bind(event, callback);
      return this.__events.push({
        on: obj,
        event: event,
        callback: callback
      });
    };

    View.prototype.appendSubView = function(v) {
      if (!this.__subview) {
        this.__subview = [];
      }
      return this.__subview.push(v);
    };

    View.prototype.__unbind = function() {
      var event, _results;
      if (this.__events) {
        _results = [];
        while (event = this.__events.shift()) {
          _results.push(event['on'].off(event['event'], event['callback']));
        }
        return _results;
      }
    };

    View.prototype.__cleanup = function() {
      var view, _results;
      if (this.__subview) {
        _results = [];
        while (view = this.__subview.shift()) {
          _results.push(view.remove());
        }
        return _results;
      }
    };

    View.prototype.remove = function() {
      this.__unbind();
      this.__cleanup();
      return View.__super__.remove.apply(this, arguments);
    };

    return View;

  })(Backbone.View);

}).call(this);
