// Generated by CoffeeScript 1.3.3
(function() {
  var Food, Foods, Product, Products,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Product = (function(_super) {

    __extends(Product, _super);

    function Product() {
      return Product.__super__.constructor.apply(this, arguments);
    }

    Product.prototype.defaults = {
      weight: 0
    };

    Product.prototype.initialize = function() {
      this.food = this.collection.food;
      this.product = App.products.byId(this.get('product'));
      return this.set({
        'food': this.food.id
      });
    };

    Product.prototype._calculate = function(v) {
      return this.product.get(v) * this.get('weight') / 100;
    };

    Product.prototype.calories = function() {
      return this._calculate('calories');
    };

    Product.prototype.protein = function() {
      return this._calculate('protein');
    };

    Product.prototype.hydrates = function() {
      return this._calculate('hydrates');
    };

    Product.prototype.fat = function() {
      return this._calculate('fat');
    };

    Product.prototype.cholesterol = function() {
      return this._calculate('cholesterol');
    };

    return Product;

  })(Backbone.Model);

  Products = (function(_super) {

    __extends(Products, _super);

    function Products() {
      return Products.__super__.constructor.apply(this, arguments);
    }

    Products.prototype.model = Product;

    Products.prototype.initialize = function(models, pr) {
      return this.food = pr.food;
    };

    return Products;

  })(Backbone.Collection);

  Food = (function(_super) {

    __extends(Food, _super);

    function Food() {
      return Food.__super__.constructor.apply(this, arguments);
    }

    Food.prototype.initialize = function(properties) {
      var _this = this;
      this.products = new Products((properties && properties.products ? properties.products : []), {
        food: this
      });
      return this.products.on('all', function() {
        return _this.set({
          'products': _this.products.map(function(p) {
            return {
              'product': p.get('product'),
              'weight': p.get('weight')
            };
          })
        });
      });
    };

    Food.prototype.addProduct = function(params) {
      return this.products.add(params);
    };

    Food.prototype.removeProduct = function(id) {
      return _.each(this.products.where({
        'product': id
      }), function(m) {
        return m.destroy();
      });
    };

    Food.prototype._calculate = function(v) {
      return this.products.reduce((function(memo, m) {
        return memo + m[v]();
      }), 0);
    };

    Food.prototype.calories = function() {
      return this._calculate('calories');
    };

    Food.prototype.protein = function() {
      return this._calculate('protein');
    };

    Food.prototype.hydrates = function() {
      return this._calculate('hydrates');
    };

    Food.prototype.fat = function() {
      return this._calculate('fat');
    };

    Food.prototype.cholesterol = function() {
      return this._calculate('cholesterol');
    };

    Food.prototype.weight = function() {
      return this.products.reduce((function(memo, m) {
        return memo + m.get('weight');
      }), 0);
    };

    return Food;

  })(Backbone.Model);

  App.CollectionFoods = Foods = (function(_super) {

    __extends(Foods, _super);

    function Foods() {
      return Foods.__super__.constructor.apply(this, arguments);
    }

    Foods.prototype.localStorage = new Store("foods");

    Foods.prototype.model = Food;

    return Foods;

  })(Backbone.Collection);

}).call(this);
